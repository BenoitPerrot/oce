#!/usr/bin/env python3
import os, sys
import re, string

from lexer import *
from parser import *

class HeaderGenerator:
    prologue = '''\
// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.
'''

    def to_class_name(self, qname):
        return qname.package + '_' + qname.name
    
    def visit(self, node):
        f = getattr(self, 'visit_' + type(node).__name__, None)
        if f:
            f(node)
    def visit_Document(self, node):
        for d in node.declarations:
            self.visit(d)
    def visit_ClassDeclaration(self, node):
        class_name = self.to_class_name(node.qname)
        guard = '_' + class_name

        print(HeaderGenerator.prologue)
        print("#ifndef " + guard)
        print("#define " + guard)
        print()

        if node.base:
            base_name = self.to_class_name(node.base.qname)
            print("class %s : public %s" % (class_name, base_name))
        else:
            print("class %s" % class_name)
        print("{")

        print("};")

        print("#endif // " + guard)

##
def main(args):
    exit_code = 0
    for n in args[1:]:
        print(n)
        f = open(n)

        # try:
        p = Parser(Lexer(f.read()))
        d = p.parse()
        g = HeaderGenerator()
        g.visit(d)
        # print d
        # except:
        #     exit_code = 1

        f.close()
    return exit_code

if __name__ == "__main__":
    sys.exit(main(sys.argv))
